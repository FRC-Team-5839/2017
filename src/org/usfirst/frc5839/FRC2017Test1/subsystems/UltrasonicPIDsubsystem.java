// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5839.FRC2017Test1.subsystems;

import org.usfirst.frc5839.FRC2017Test1.RobotMap;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class UltrasonicPIDsubsystem extends PIDSubsystem {

    private final AnalogInput leftultrasonic = RobotMap.LeftUltrasonic;
    private final AnalogInput rightultrasonic = RobotMap.RightUltrasonic;



    // Initialize your subsystem here
    public UltrasonicPIDsubsystem() {
        super("UltrasonicPIDsubsystem", 0.001, 0.0001, 0);
        getPIDController().setAbsoluteTolerance(40);
        getPIDController().setContinuous(true);
        getPIDController().setOutputRange(-0.4, 0.4);
        getPIDController().setInputRange(-300, 300);
        LiveWindow.addActuator("UltrasonicPID", "PID1", getPIDController());
        
        

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void RunUltrasonicpid(){
    	getPIDController().setSetpoint(0);
    	getPIDController().enable();
    }
    
    public void StopUltrasonicpid() {
    	getPIDController().disable();
    }

    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        return leftultrasonic.getValue()-rightultrasonic.getValue();

    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	SmartDashboard.putNumber("PIDOUT", output);
    	SmartDashboard.putNumber("ultrasonicPIDinput", returnPIDInput());
    	SmartDashboard.putNumber("left", leftultrasonic.getValue());
    	SmartDashboard.putNumber("right", rightultrasonic.getValue());
//        Robot.driveBase.CartesianControl(Robot.oi.joystick1.getRawAxis(3), Robot.oi.joystick1.getRawAxis(4), -output);

    }
}
